'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/types.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.RemoteRouter =
  exports.HypToken =
  exports.GenesisState =
  exports.Params =
  exports.HypTokenType =
  exports.protobufPackage =
    void 0;
exports.hypTokenTypeFromJSON = hypTokenTypeFromJSON;
exports.hypTokenTypeToJSON = hypTokenTypeToJSON;
exports.hypTokenTypeToNumber = hypTokenTypeToNumber;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
exports.protobufPackage = 'hyperlane.warp.v1';
/** HypTokenType ... */
var HypTokenType;
(function (HypTokenType) {
  /** HYP_TOKEN_TYPE_UNSPECIFIED - HYP_TOKEN_TYPE_UNSPECIFIED ... */
  HypTokenType['HYP_TOKEN_TYPE_UNSPECIFIED'] = 'HYP_TOKEN_TYPE_UNSPECIFIED';
  /** HYP_TOKEN_TYPE_COLLATERAL - HYP_TOKEN_TYPE_COLLATERAL ... */
  HypTokenType['HYP_TOKEN_TYPE_COLLATERAL'] = 'HYP_TOKEN_TYPE_COLLATERAL';
  /** HYP_TOKEN_TYPE_SYNTHETIC - HYP_TOKEN_TYPE_SYNTHETIC ... */
  HypTokenType['HYP_TOKEN_TYPE_SYNTHETIC'] = 'HYP_TOKEN_TYPE_SYNTHETIC';
  HypTokenType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(HypTokenType || (exports.HypTokenType = HypTokenType = {}));
function hypTokenTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'HYP_TOKEN_TYPE_UNSPECIFIED':
      return HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    case 1:
    case 'HYP_TOKEN_TYPE_COLLATERAL':
      return HypTokenType.HYP_TOKEN_TYPE_COLLATERAL;
    case 2:
    case 'HYP_TOKEN_TYPE_SYNTHETIC':
      return HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return HypTokenType.UNRECOGNIZED;
  }
}
function hypTokenTypeToJSON(object) {
  switch (object) {
    case HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED:
      return 'HYP_TOKEN_TYPE_UNSPECIFIED';
    case HypTokenType.HYP_TOKEN_TYPE_COLLATERAL:
      return 'HYP_TOKEN_TYPE_COLLATERAL';
    case HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC:
      return 'HYP_TOKEN_TYPE_SYNTHETIC';
    case HypTokenType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
function hypTokenTypeToNumber(object) {
  switch (object) {
    case HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED:
      return 0;
    case HypTokenType.HYP_TOKEN_TYPE_COLLATERAL:
      return 1;
    case HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC:
      return 2;
    case HypTokenType.UNRECOGNIZED:
    default:
      return -1;
  }
}
function createBaseParams() {
  return {};
}
exports.Params = {
  encode(_, writer = minimal_1.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return exports.Params.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(_) {
    const message = createBaseParams();
    return message;
  },
};
function createBaseGenesisState() {
  return { params: undefined, tokens: [] };
}
exports.GenesisState = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.params !== undefined) {
      exports.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.tokens) {
      exports.HypToken.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = exports.Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tokens.push(exports.HypToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet(object.params)
        ? exports.Params.fromJSON(object.params)
        : undefined,
      tokens: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.tokens,
      )
        ? object.tokens.map((e) => exports.HypToken.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.params !== undefined) {
      obj.params = exports.Params.toJSON(message.params);
    }
    if ((_a = message.tokens) === null || _a === void 0 ? void 0 : _a.length) {
      obj.tokens = message.tokens.map((e) => exports.HypToken.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return exports.GenesisState.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState();
    message.params =
      object.params !== undefined && object.params !== null
        ? exports.Params.fromPartial(object.params)
        : undefined;
    message.tokens =
      ((_a = object.tokens) === null || _a === void 0
        ? void 0
        : _a.map((e) => exports.HypToken.fromPartial(e))) || [];
    return message;
  },
};
function createBaseHypToken() {
  return {
    id: '',
    owner: '',
    token_type: HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
    origin_mailbox: '',
    origin_denom: '',
    collateral_balance: '',
    ism_id: '',
  };
}
exports.HypToken = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      writer.uint32(24).int32(hypTokenTypeToNumber(message.token_type));
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(34).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(42).string(message.origin_denom);
    }
    if (message.collateral_balance !== '') {
      writer.uint32(50).string(message.collateral_balance);
    }
    if (message.ism_id !== '') {
      writer.uint32(58).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHypToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.token_type = hypTokenTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.origin_denom = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.collateral_balance = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_type: isSet(object.token_type)
        ? hypTokenTypeFromJSON(object.token_type)
        : HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
      collateral_balance: isSet(object.collateral_balance)
        ? globalThis.String(object.collateral_balance)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      obj.token_type = hypTokenTypeToJSON(message.token_type);
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    if (message.collateral_balance !== '') {
      obj.collateral_balance = message.collateral_balance;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return exports.HypToken.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f, _g;
    const message = createBaseHypToken();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
    message.token_type =
      (_c = object.token_type) !== null && _c !== void 0
        ? _c
        : HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    message.origin_mailbox =
      (_d = object.origin_mailbox) !== null && _d !== void 0 ? _d : '';
    message.origin_denom =
      (_e = object.origin_denom) !== null && _e !== void 0 ? _e : '';
    message.collateral_balance =
      (_f = object.collateral_balance) !== null && _f !== void 0 ? _f : '';
    message.ism_id = (_g = object.ism_id) !== null && _g !== void 0 ? _g : '';
    return message;
  },
};
function createBaseRemoteRouter() {
  return { receiver_domain: 0, receiver_contract: '', gas: '' };
}
exports.RemoteRouter = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.receiver_domain !== 0) {
      writer.uint32(8).uint32(message.receiver_domain);
    }
    if (message.receiver_contract !== '') {
      writer.uint32(18).string(message.receiver_contract);
    }
    if (message.gas !== '') {
      writer.uint32(26).string(message.gas);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.receiver_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.receiver_contract = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      receiver_domain: isSet(object.receiver_domain)
        ? globalThis.Number(object.receiver_domain)
        : 0,
      receiver_contract: isSet(object.receiver_contract)
        ? globalThis.String(object.receiver_contract)
        : '',
      gas: isSet(object.gas) ? globalThis.String(object.gas) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.receiver_domain !== 0) {
      obj.receiver_domain = Math.round(message.receiver_domain);
    }
    if (message.receiver_contract !== '') {
      obj.receiver_contract = message.receiver_contract;
    }
    if (message.gas !== '') {
      obj.gas = message.gas;
    }
    return obj;
  },
  create(base) {
    return exports.RemoteRouter.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseRemoteRouter();
    message.receiver_domain =
      (_a = object.receiver_domain) !== null && _a !== void 0 ? _a : 0;
    message.receiver_contract =
      (_b = object.receiver_contract) !== null && _b !== void 0 ? _b : '';
    message.gas = (_c = object.gas) !== null && _c !== void 0 ? _c : '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map
