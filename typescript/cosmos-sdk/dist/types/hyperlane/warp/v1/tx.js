'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/tx.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.MsgClientImpl =
  exports.MsgServiceName =
  exports.MsgRemoteTransferResponse =
  exports.MsgRemoteTransfer =
  exports.MsgUnrollRemoteRouterResponse =
  exports.MsgUnrollRemoteRouter =
  exports.MsgEnrollRemoteRouterResponse =
  exports.MsgEnrollRemoteRouter =
  exports.MsgSetTokenResponse =
  exports.MsgSetToken =
  exports.MsgCreateSyntheticTokenResponse =
  exports.MsgCreateSyntheticToken =
  exports.MsgCreateCollateralTokenResponse =
  exports.MsgCreateCollateralToken =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const coin_1 = require('../../../cosmos/base/v1beta1/coin');
const types_1 = require('./types');
exports.protobufPackage = 'hyperlane.warp.v1';
function createBaseMsgCreateCollateralToken() {
  return { owner: '', origin_mailbox: '', origin_denom: '' };
}
exports.MsgCreateCollateralToken = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(26).string(message.origin_denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.origin_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    return obj;
  },
  create(base) {
    return exports.MsgCreateCollateralToken.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseMsgCreateCollateralToken();
    message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
    message.origin_mailbox =
      (_b = object.origin_mailbox) !== null && _b !== void 0 ? _b : '';
    message.origin_denom =
      (_c = object.origin_denom) !== null && _c !== void 0 ? _c : '';
    return message;
  },
};
function createBaseMsgCreateCollateralTokenResponse() {
  return { id: '' };
}
exports.MsgCreateCollateralTokenResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.MsgCreateCollateralTokenResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgCreateCollateralTokenResponse();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseMsgCreateSyntheticToken() {
  return { owner: '', origin_mailbox: '' };
}
exports.MsgCreateSyntheticToken = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    return obj;
  },
  create(base) {
    return exports.MsgCreateSyntheticToken.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseMsgCreateSyntheticToken();
    message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
    message.origin_mailbox =
      (_b = object.origin_mailbox) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function createBaseMsgCreateSyntheticTokenResponse() {
  return { id: '' };
}
exports.MsgCreateSyntheticTokenResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.MsgCreateSyntheticTokenResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgCreateSyntheticTokenResponse();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseMsgSetToken() {
  return { owner: '', token_id: '', new_owner: '', ism_id: '' };
}
exports.MsgSetToken = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    if (message.ism_id !== '') {
      writer.uint32(34).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return exports.MsgSetToken.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d;
    const message = createBaseMsgSetToken();
    message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
    message.token_id =
      (_b = object.token_id) !== null && _b !== void 0 ? _b : '';
    message.new_owner =
      (_c = object.new_owner) !== null && _c !== void 0 ? _c : '';
    message.ism_id = (_d = object.ism_id) !== null && _d !== void 0 ? _d : '';
    return message;
  },
};
function createBaseMsgSetTokenResponse() {
  return {};
}
exports.MsgSetTokenResponse = {
  encode(_, writer = minimal_1.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return exports.MsgSetTokenResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(_) {
    const message = createBaseMsgSetTokenResponse();
    return message;
  },
};
function createBaseMsgEnrollRemoteRouter() {
  return { owner: '', token_id: '', remote_router: undefined };
}
exports.MsgEnrollRemoteRouter = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.remote_router !== undefined) {
      types_1.RemoteRouter.encode(
        message.remote_router,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.remote_router = types_1.RemoteRouter.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      remote_router: isSet(object.remote_router)
        ? types_1.RemoteRouter.fromJSON(object.remote_router)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.remote_router !== undefined) {
      obj.remote_router = types_1.RemoteRouter.toJSON(message.remote_router);
    }
    return obj;
  },
  create(base) {
    return exports.MsgEnrollRemoteRouter.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseMsgEnrollRemoteRouter();
    message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
    message.token_id =
      (_b = object.token_id) !== null && _b !== void 0 ? _b : '';
    message.remote_router =
      object.remote_router !== undefined && object.remote_router !== null
        ? types_1.RemoteRouter.fromPartial(object.remote_router)
        : undefined;
    return message;
  },
};
function createBaseMsgEnrollRemoteRouterResponse() {
  return {};
}
exports.MsgEnrollRemoteRouterResponse = {
  encode(_, writer = minimal_1.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return exports.MsgEnrollRemoteRouterResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(_) {
    const message = createBaseMsgEnrollRemoteRouterResponse();
    return message;
  },
};
function createBaseMsgUnrollRemoteRouter() {
  return { owner: '', token_id: '', receiver_domain: 0 };
}
exports.MsgUnrollRemoteRouter = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.receiver_domain !== 0) {
      writer.uint32(24).uint32(message.receiver_domain);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.receiver_domain = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      receiver_domain: isSet(object.receiver_domain)
        ? globalThis.Number(object.receiver_domain)
        : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.receiver_domain !== 0) {
      obj.receiver_domain = Math.round(message.receiver_domain);
    }
    return obj;
  },
  create(base) {
    return exports.MsgUnrollRemoteRouter.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseMsgUnrollRemoteRouter();
    message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
    message.token_id =
      (_b = object.token_id) !== null && _b !== void 0 ? _b : '';
    message.receiver_domain =
      (_c = object.receiver_domain) !== null && _c !== void 0 ? _c : 0;
    return message;
  },
};
function createBaseMsgUnrollRemoteRouterResponse() {
  return {};
}
exports.MsgUnrollRemoteRouterResponse = {
  encode(_, writer = minimal_1.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return exports.MsgUnrollRemoteRouterResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(_) {
    const message = createBaseMsgUnrollRemoteRouterResponse();
    return message;
  },
};
function createBaseMsgRemoteTransfer() {
  return {
    sender: '',
    token_id: '',
    destination_domain: 0,
    recipient: '',
    amount: '',
    custom_hook_id: '',
    gas_limit: '',
    max_fee: undefined,
    custom_hook_metadata: '',
  };
}
exports.MsgRemoteTransfer = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.destination_domain !== 0) {
      writer.uint32(24).uint32(message.destination_domain);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.amount !== '') {
      writer.uint32(42).string(message.amount);
    }
    if (message.custom_hook_id !== '') {
      writer.uint32(50).string(message.custom_hook_id);
    }
    if (message.gas_limit !== '') {
      writer.uint32(58).string(message.gas_limit);
    }
    if (message.max_fee !== undefined) {
      coin_1.Coin.encode(message.max_fee, writer.uint32(66).fork()).ldelim();
    }
    if (message.custom_hook_metadata !== '') {
      writer.uint32(74).string(message.custom_hook_metadata);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.destination_domain = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.amount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.custom_hook_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.gas_limit = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.max_fee = coin_1.Coin.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.custom_hook_metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
      custom_hook_id: isSet(object.custom_hook_id)
        ? globalThis.String(object.custom_hook_id)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
      max_fee: isSet(object.max_fee)
        ? coin_1.Coin.fromJSON(object.max_fee)
        : undefined,
      custom_hook_metadata: isSet(object.custom_hook_metadata)
        ? globalThis.String(object.custom_hook_metadata)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.amount !== '') {
      obj.amount = message.amount;
    }
    if (message.custom_hook_id !== '') {
      obj.custom_hook_id = message.custom_hook_id;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    if (message.max_fee !== undefined) {
      obj.max_fee = coin_1.Coin.toJSON(message.max_fee);
    }
    if (message.custom_hook_metadata !== '') {
      obj.custom_hook_metadata = message.custom_hook_metadata;
    }
    return obj;
  },
  create(base) {
    return exports.MsgRemoteTransfer.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const message = createBaseMsgRemoteTransfer();
    message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
    message.token_id =
      (_b = object.token_id) !== null && _b !== void 0 ? _b : '';
    message.destination_domain =
      (_c = object.destination_domain) !== null && _c !== void 0 ? _c : 0;
    message.recipient =
      (_d = object.recipient) !== null && _d !== void 0 ? _d : '';
    message.amount = (_e = object.amount) !== null && _e !== void 0 ? _e : '';
    message.custom_hook_id =
      (_f = object.custom_hook_id) !== null && _f !== void 0 ? _f : '';
    message.gas_limit =
      (_g = object.gas_limit) !== null && _g !== void 0 ? _g : '';
    message.max_fee =
      object.max_fee !== undefined && object.max_fee !== null
        ? coin_1.Coin.fromPartial(object.max_fee)
        : undefined;
    message.custom_hook_metadata =
      (_h = object.custom_hook_metadata) !== null && _h !== void 0 ? _h : '';
    return message;
  },
};
function createBaseMsgRemoteTransferResponse() {
  return { message_id: '' };
}
exports.MsgRemoteTransferResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.message_id !== '') {
      writer.uint32(10).string(message.message_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    return obj;
  },
  create(base) {
    return exports.MsgRemoteTransferResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgRemoteTransferResponse();
    message.message_id =
      (_a = object.message_id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
exports.MsgServiceName = 'hyperlane.warp.v1.Msg';
class MsgClientImpl {
  constructor(rpc, opts) {
    this.service =
      (opts === null || opts === void 0 ? void 0 : opts.service) ||
      exports.MsgServiceName;
    this.rpc = rpc;
    this.CreateCollateralToken = this.CreateCollateralToken.bind(this);
    this.CreateSyntheticToken = this.CreateSyntheticToken.bind(this);
    this.SetToken = this.SetToken.bind(this);
    this.EnrollRemoteRouter = this.EnrollRemoteRouter.bind(this);
    this.UnrollRemoteRouter = this.UnrollRemoteRouter.bind(this);
    this.RemoteTransfer = this.RemoteTransfer.bind(this);
  }
  CreateCollateralToken(request) {
    const data = exports.MsgCreateCollateralToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateCollateralToken',
      data,
    );
    return promise.then((data) =>
      exports.MsgCreateCollateralTokenResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  CreateSyntheticToken(request) {
    const data = exports.MsgCreateSyntheticToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateSyntheticToken',
      data,
    );
    return promise.then((data) =>
      exports.MsgCreateSyntheticTokenResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  SetToken(request) {
    const data = exports.MsgSetToken.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetToken', data);
    return promise.then((data) =>
      exports.MsgSetTokenResponse.decode(minimal_1.default.Reader.create(data)),
    );
  }
  EnrollRemoteRouter(request) {
    const data = exports.MsgEnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'EnrollRemoteRouter', data);
    return promise.then((data) =>
      exports.MsgEnrollRemoteRouterResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  UnrollRemoteRouter(request) {
    const data = exports.MsgUnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'UnrollRemoteRouter', data);
    return promise.then((data) =>
      exports.MsgUnrollRemoteRouterResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  RemoteTransfer(request) {
    const data = exports.MsgRemoteTransfer.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RemoteTransfer', data);
    return promise.then((data) =>
      exports.MsgRemoteTransferResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
}
exports.MsgClientImpl = MsgClientImpl;
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map
