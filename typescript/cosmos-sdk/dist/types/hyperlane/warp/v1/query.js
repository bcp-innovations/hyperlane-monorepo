'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/query.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.QueryClientImpl =
  exports.QueryServiceName =
  exports.QueryQuoteRemoteTransferResponse =
  exports.QueryQuoteRemoteTransferRequest =
  exports.QueryRemoteRoutersResponse =
  exports.QueryRemoteRoutersRequest =
  exports.QueryBridgedSupplyResponse =
  exports.QueryBridgedSupplyRequest =
  exports.WrappedHypToken =
  exports.QueryTokenResponse =
  exports.QueryTokenRequest =
  exports.QueryTokensResponse =
  exports.QueryTokensRequest =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const pagination_1 = require('../../../cosmos/base/query/v1beta1/pagination');
const coin_1 = require('../../../cosmos/base/v1beta1/coin');
const types_1 = require('./types');
exports.protobufPackage = 'hyperlane.warp.v1';
function createBaseQueryTokensRequest() {
  return { pagination: undefined };
}
exports.QueryTokensRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryTokensRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryTokensRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryTokensResponse() {
  return { tokens: [], pagination: undefined };
}
exports.QueryTokensResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.tokens) {
      exports.WrappedHypToken.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tokens.push(
            exports.WrappedHypToken.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tokens: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.tokens,
      )
        ? object.tokens.map((e) => exports.WrappedHypToken.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.tokens) === null || _a === void 0 ? void 0 : _a.length) {
      obj.tokens = message.tokens.map((e) => exports.WrappedHypToken.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryTokensResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryTokensResponse();
    message.tokens =
      ((_a = object.tokens) === null || _a === void 0
        ? void 0
        : _a.map((e) => exports.WrappedHypToken.fromPartial(e))) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryTokenRequest() {
  return { id: '' };
}
exports.QueryTokenRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.QueryTokenRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryTokenRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseQueryTokenResponse() {
  return { token: undefined };
}
exports.QueryTokenResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.token !== undefined) {
      exports.WrappedHypToken.encode(
        message.token,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.token = exports.WrappedHypToken.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      token: isSet(object.token)
        ? exports.WrappedHypToken.fromJSON(object.token)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.token !== undefined) {
      obj.token = exports.WrappedHypToken.toJSON(message.token);
    }
    return obj;
  },
  create(base) {
    return exports.QueryTokenResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryTokenResponse();
    message.token =
      object.token !== undefined && object.token !== null
        ? exports.WrappedHypToken.fromPartial(object.token)
        : undefined;
    return message;
  },
};
function createBaseWrappedHypToken() {
  return {
    id: '',
    owner: '',
    token_type: types_1.HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
    origin_mailbox: '',
    origin_denom: '',
    ism_id: '',
  };
}
exports.WrappedHypToken = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (
      message.token_type !== types_1.HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED
    ) {
      writer
        .uint32(24)
        .int32((0, types_1.hypTokenTypeToNumber)(message.token_type));
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(34).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(42).string(message.origin_denom);
    }
    if (message.ism_id !== '') {
      writer.uint32(58).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappedHypToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.token_type = (0, types_1.hypTokenTypeFromJSON)(
            reader.int32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.origin_denom = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_type: isSet(object.token_type)
        ? (0, types_1.hypTokenTypeFromJSON)(object.token_type)
        : types_1.HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (
      message.token_type !== types_1.HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED
    ) {
      obj.token_type = (0, types_1.hypTokenTypeToJSON)(message.token_type);
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return exports.WrappedHypToken.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f;
    const message = createBaseWrappedHypToken();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
    message.token_type =
      (_c = object.token_type) !== null && _c !== void 0
        ? _c
        : types_1.HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    message.origin_mailbox =
      (_d = object.origin_mailbox) !== null && _d !== void 0 ? _d : '';
    message.origin_denom =
      (_e = object.origin_denom) !== null && _e !== void 0 ? _e : '';
    message.ism_id = (_f = object.ism_id) !== null && _f !== void 0 ? _f : '';
    return message;
  },
};
function createBaseQueryBridgedSupplyRequest() {
  return { id: '' };
}
exports.QueryBridgedSupplyRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgedSupplyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.QueryBridgedSupplyRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryBridgedSupplyRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseQueryBridgedSupplyResponse() {
  return { bridged_supply: undefined };
}
exports.QueryBridgedSupplyResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.bridged_supply !== undefined) {
      coin_1.Coin.encode(
        message.bridged_supply,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgedSupplyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.bridged_supply = coin_1.Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      bridged_supply: isSet(object.bridged_supply)
        ? coin_1.Coin.fromJSON(object.bridged_supply)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.bridged_supply !== undefined) {
      obj.bridged_supply = coin_1.Coin.toJSON(message.bridged_supply);
    }
    return obj;
  },
  create(base) {
    return exports.QueryBridgedSupplyResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryBridgedSupplyResponse();
    message.bridged_supply =
      object.bridged_supply !== undefined && object.bridged_supply !== null
        ? coin_1.Coin.fromPartial(object.bridged_supply)
        : undefined;
    return message;
  },
};
function createBaseQueryRemoteRoutersRequest() {
  return { id: '', pagination: undefined };
}
exports.QueryRemoteRoutersRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRemoteRoutersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryRemoteRoutersRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryRemoteRoutersRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryRemoteRoutersResponse() {
  return { remote_routers: [], pagination: undefined };
}
exports.QueryRemoteRoutersResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.remote_routers) {
      types_1.RemoteRouter.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRemoteRoutersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.remote_routers.push(
            types_1.RemoteRouter.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      remote_routers: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.remote_routers,
      )
        ? object.remote_routers.map((e) => types_1.RemoteRouter.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.remote_routers) === null || _a === void 0
        ? void 0
        : _a.length
    ) {
      obj.remote_routers = message.remote_routers.map((e) =>
        types_1.RemoteRouter.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryRemoteRoutersResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryRemoteRoutersResponse();
    message.remote_routers =
      ((_a = object.remote_routers) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.RemoteRouter.fromPartial(e))) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryQuoteRemoteTransferRequest() {
  return { id: '', destination_domain: '' };
}
exports.QueryQuoteRemoteTransferRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.destination_domain !== '') {
      writer.uint32(18).string(message.destination_domain);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteRemoteTransferRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.destination_domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.String(object.destination_domain)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.destination_domain !== '') {
      obj.destination_domain = message.destination_domain;
    }
    return obj;
  },
  create(base) {
    return exports.QueryQuoteRemoteTransferRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseQueryQuoteRemoteTransferRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.destination_domain =
      (_b = object.destination_domain) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function createBaseQueryQuoteRemoteTransferResponse() {
  return { gas_payment: [] };
}
exports.QueryQuoteRemoteTransferResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.gas_payment) {
      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteRemoteTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gas_payment.push(coin_1.Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_payment: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.gas_payment,
      )
        ? object.gas_payment.map((e) => coin_1.Coin.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.gas_payment) === null || _a === void 0 ? void 0 : _a.length
    ) {
      obj.gas_payment = message.gas_payment.map((e) => coin_1.Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return exports.QueryQuoteRemoteTransferResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryQuoteRemoteTransferResponse();
    message.gas_payment =
      ((_a = object.gas_payment) === null || _a === void 0
        ? void 0
        : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
    return message;
  },
};
exports.QueryServiceName = 'hyperlane.warp.v1.Query';
class QueryClientImpl {
  constructor(rpc, opts) {
    this.service =
      (opts === null || opts === void 0 ? void 0 : opts.service) ||
      exports.QueryServiceName;
    this.rpc = rpc;
    this.Tokens = this.Tokens.bind(this);
    this.Token = this.Token.bind(this);
    this.BridgedSupply = this.BridgedSupply.bind(this);
    this.RemoteRouters = this.RemoteRouters.bind(this);
    this.QuoteRemoteTransfer = this.QuoteRemoteTransfer.bind(this);
  }
  Tokens(request) {
    const data = exports.QueryTokensRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Tokens', data);
    return promise.then((data) =>
      exports.QueryTokensResponse.decode(minimal_1.default.Reader.create(data)),
    );
  }
  Token(request) {
    const data = exports.QueryTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Token', data);
    return promise.then((data) =>
      exports.QueryTokenResponse.decode(minimal_1.default.Reader.create(data)),
    );
  }
  BridgedSupply(request) {
    const data = exports.QueryBridgedSupplyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'BridgedSupply', data);
    return promise.then((data) =>
      exports.QueryBridgedSupplyResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  RemoteRouters(request) {
    const data = exports.QueryRemoteRoutersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RemoteRouters', data);
    return promise.then((data) =>
      exports.QueryRemoteRoutersResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  QuoteRemoteTransfer(request) {
    const data =
      exports.QueryQuoteRemoteTransferRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'QuoteRemoteTransfer', data);
    return promise.then((data) =>
      exports.QueryQuoteRemoteTransferResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
}
exports.QueryClientImpl = QueryClientImpl;
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map
