'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/module/v1/module.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.Module = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
exports.protobufPackage = 'hyperlane.warp.module.v1';
function createBaseModule() {
  return { enabled_tokens: [], authority: '' };
}
exports.Module = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.enabled_tokens) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.authority !== '') {
      writer.uint32(18).string(message.authority);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.enabled_tokens.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.enabled_tokens.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.authority = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      enabled_tokens: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.enabled_tokens,
      )
        ? object.enabled_tokens.map((e) => globalThis.Number(e))
        : [],
      authority: isSet(object.authority)
        ? globalThis.String(object.authority)
        : '',
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.enabled_tokens) === null || _a === void 0
        ? void 0
        : _a.length
    ) {
      obj.enabled_tokens = message.enabled_tokens.map((e) => Math.round(e));
    }
    if (message.authority !== '') {
      obj.authority = message.authority;
    }
    return obj;
  },
  create(base) {
    return exports.Module.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseModule();
    message.enabled_tokens =
      ((_a = object.enabled_tokens) === null || _a === void 0
        ? void 0
        : _a.map((e) => e)) || [];
    message.authority =
      (_b = object.authority) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=module.js.map
