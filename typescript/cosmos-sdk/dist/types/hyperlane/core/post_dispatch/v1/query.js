'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/query.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.QueryClientImpl =
  exports.QueryServiceName =
  exports.QueryNoopHooksResponse =
  exports.QueryNoopHooksRequest =
  exports.QueryNoopHookResponse =
  exports.QueryNoopHookRequest =
  exports.TreeResponse =
  exports.WrappedMerkleTreeHookResponse =
  exports.QueryMerkleTreeHookResponse =
  exports.QueryMerkleTreeHook =
  exports.QueryMerkleTreeHooksResponse =
  exports.QueryMerkleTreeHooks =
  exports.QueryQuoteGasPaymentResponse =
  exports.QueryQuoteGasPaymentRequest =
  exports.QueryDestinationGasConfigsResponse =
  exports.QueryDestinationGasConfigsRequest =
  exports.QueryIgpResponse =
  exports.QueryIgpRequest =
  exports.QueryIgpsResponse =
  exports.QueryIgpsRequest =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const pagination_1 = require('../../../../cosmos/base/query/v1beta1/pagination');
const coin_1 = require('../../../../cosmos/base/v1beta1/coin');
const types_1 = require('./types');
exports.protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseQueryIgpsRequest() {
  return { pagination: undefined };
}
exports.QueryIgpsRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryIgpsRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryIgpsRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryIgpsResponse() {
  return { igps: [], pagination: undefined };
}
exports.QueryIgpsResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.igps) {
      types_1.InterchainGasPaymaster.encode(
        v,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igps.push(
            types_1.InterchainGasPaymaster.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igps: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.igps,
      )
        ? object.igps.map((e) => types_1.InterchainGasPaymaster.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.igps) === null || _a === void 0 ? void 0 : _a.length) {
      obj.igps = message.igps.map((e) =>
        types_1.InterchainGasPaymaster.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryIgpsResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryIgpsResponse();
    message.igps =
      ((_a = object.igps) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.InterchainGasPaymaster.fromPartial(e))) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryIgpRequest() {
  return { id: '' };
}
exports.QueryIgpRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.QueryIgpRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryIgpRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseQueryIgpResponse() {
  return { igp: undefined };
}
exports.QueryIgpResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.igp !== undefined) {
      types_1.InterchainGasPaymaster.encode(
        message.igp,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igp = types_1.InterchainGasPaymaster.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igp: isSet(object.igp)
        ? types_1.InterchainGasPaymaster.fromJSON(object.igp)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.igp !== undefined) {
      obj.igp = types_1.InterchainGasPaymaster.toJSON(message.igp);
    }
    return obj;
  },
  create(base) {
    return exports.QueryIgpResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryIgpResponse();
    message.igp =
      object.igp !== undefined && object.igp !== null
        ? types_1.InterchainGasPaymaster.fromPartial(object.igp)
        : undefined;
    return message;
  },
};
function createBaseQueryDestinationGasConfigsRequest() {
  return { id: '', pagination: undefined };
}
exports.QueryDestinationGasConfigsRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryDestinationGasConfigsRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDestinationGasConfigsRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryDestinationGasConfigsResponse() {
  return { destination_gas_configs: [], pagination: undefined };
}
exports.QueryDestinationGasConfigsResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.destination_gas_configs) {
      types_1.DestinationGasConfig.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.destination_gas_configs.push(
            types_1.DestinationGasConfig.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      destination_gas_configs: globalThis.Array.isArray(
        object === null || object === void 0
          ? void 0
          : object.destination_gas_configs,
      )
        ? object.destination_gas_configs.map((e) =>
            types_1.DestinationGasConfig.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.destination_gas_configs) === null || _a === void 0
        ? void 0
        : _a.length
    ) {
      obj.destination_gas_configs = message.destination_gas_configs.map((e) =>
        types_1.DestinationGasConfig.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryDestinationGasConfigsResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDestinationGasConfigsResponse();
    message.destination_gas_configs =
      ((_a = object.destination_gas_configs) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.DestinationGasConfig.fromPartial(e))) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryQuoteGasPaymentRequest() {
  return { igp_id: '', destination_domain: '', gas_limit: '' };
}
exports.QueryQuoteGasPaymentRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.igp_id !== '') {
      writer.uint32(10).string(message.igp_id);
    }
    if (message.destination_domain !== '') {
      writer.uint32(18).string(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      writer.uint32(26).string(message.gas_limit);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igp_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.destination_domain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_limit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.String(object.destination_domain)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.destination_domain !== '') {
      obj.destination_domain = message.destination_domain;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    return obj;
  },
  create(base) {
    return exports.QueryQuoteGasPaymentRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseQueryQuoteGasPaymentRequest();
    message.igp_id = (_a = object.igp_id) !== null && _a !== void 0 ? _a : '';
    message.destination_domain =
      (_b = object.destination_domain) !== null && _b !== void 0 ? _b : '';
    message.gas_limit =
      (_c = object.gas_limit) !== null && _c !== void 0 ? _c : '';
    return message;
  },
};
function createBaseQueryQuoteGasPaymentResponse() {
  return { gas_payment: [] };
}
exports.QueryQuoteGasPaymentResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.gas_payment) {
      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gas_payment.push(coin_1.Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_payment: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.gas_payment,
      )
        ? object.gas_payment.map((e) => coin_1.Coin.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.gas_payment) === null || _a === void 0 ? void 0 : _a.length
    ) {
      obj.gas_payment = message.gas_payment.map((e) => coin_1.Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return exports.QueryQuoteGasPaymentResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryQuoteGasPaymentResponse();
    message.gas_payment =
      ((_a = object.gas_payment) === null || _a === void 0
        ? void 0
        : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
    return message;
  },
};
function createBaseQueryMerkleTreeHooks() {
  return { pagination: undefined };
}
exports.QueryMerkleTreeHooks = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryMerkleTreeHooks.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHooks();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMerkleTreeHooksResponse() {
  return { merkle_tree_hooks: [], pagination: undefined };
}
exports.QueryMerkleTreeHooksResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.merkle_tree_hooks) {
      exports.WrappedMerkleTreeHookResponse.encode(
        v,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.merkle_tree_hooks.push(
            exports.WrappedMerkleTreeHookResponse.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      merkle_tree_hooks: globalThis.Array.isArray(
        object === null || object === void 0
          ? void 0
          : object.merkle_tree_hooks,
      )
        ? object.merkle_tree_hooks.map((e) =>
            exports.WrappedMerkleTreeHookResponse.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.merkle_tree_hooks) === null || _a === void 0
        ? void 0
        : _a.length
    ) {
      obj.merkle_tree_hooks = message.merkle_tree_hooks.map((e) =>
        exports.WrappedMerkleTreeHookResponse.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryMerkleTreeHooksResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryMerkleTreeHooksResponse();
    message.merkle_tree_hooks =
      ((_a = object.merkle_tree_hooks) === null || _a === void 0
        ? void 0
        : _a.map((e) =>
            exports.WrappedMerkleTreeHookResponse.fromPartial(e),
          )) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMerkleTreeHook() {
  return { id: '' };
}
exports.QueryMerkleTreeHook = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.QueryMerkleTreeHook.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryMerkleTreeHook();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseQueryMerkleTreeHookResponse() {
  return { merkle_tree_hook: undefined };
}
exports.QueryMerkleTreeHookResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.merkle_tree_hook !== undefined) {
      exports.WrappedMerkleTreeHookResponse.encode(
        message.merkle_tree_hook,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.merkle_tree_hook =
            exports.WrappedMerkleTreeHookResponse.decode(
              reader,
              reader.uint32(),
            );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      merkle_tree_hook: isSet(object.merkle_tree_hook)
        ? exports.WrappedMerkleTreeHookResponse.fromJSON(
            object.merkle_tree_hook,
          )
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.merkle_tree_hook !== undefined) {
      obj.merkle_tree_hook = exports.WrappedMerkleTreeHookResponse.toJSON(
        message.merkle_tree_hook,
      );
    }
    return obj;
  },
  create(base) {
    return exports.QueryMerkleTreeHookResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHookResponse();
    message.merkle_tree_hook =
      object.merkle_tree_hook !== undefined && object.merkle_tree_hook !== null
        ? exports.WrappedMerkleTreeHookResponse.fromPartial(
            object.merkle_tree_hook,
          )
        : undefined;
    return message;
  },
};
function createBaseWrappedMerkleTreeHookResponse() {
  return { id: '', owner: '', mailbox_id: '', merkle_tree: undefined };
}
exports.WrappedMerkleTreeHookResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(26).string(message.mailbox_id);
    }
    if (message.merkle_tree !== undefined) {
      exports.TreeResponse.encode(
        message.merkle_tree,
        writer.uint32(34).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappedMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.merkle_tree = exports.TreeResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      merkle_tree: isSet(object.merkle_tree)
        ? exports.TreeResponse.fromJSON(object.merkle_tree)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.merkle_tree !== undefined) {
      obj.merkle_tree = exports.TreeResponse.toJSON(message.merkle_tree);
    }
    return obj;
  },
  create(base) {
    return exports.WrappedMerkleTreeHookResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseWrappedMerkleTreeHookResponse();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
    message.mailbox_id =
      (_c = object.mailbox_id) !== null && _c !== void 0 ? _c : '';
    message.merkle_tree =
      object.merkle_tree !== undefined && object.merkle_tree !== null
        ? exports.TreeResponse.fromPartial(object.merkle_tree)
        : undefined;
    return message;
  },
};
function createBaseTreeResponse() {
  return { leafs: [], count: 0, root: new Uint8Array(0) };
}
exports.TreeResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.leafs) {
      writer.uint32(10).bytes(v);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    if (message.root.length !== 0) {
      writer.uint32(26).bytes(message.root);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.leafs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.count = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.root = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      leafs: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.leafs,
      )
        ? object.leafs.map((e) => bytesFromBase64(e))
        : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      root: isSet(object.root)
        ? bytesFromBase64(object.root)
        : new Uint8Array(0),
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.leafs) === null || _a === void 0 ? void 0 : _a.length) {
      obj.leafs = message.leafs.map((e) => base64FromBytes(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.root.length !== 0) {
      obj.root = base64FromBytes(message.root);
    }
    return obj;
  },
  create(base) {
    return exports.TreeResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseTreeResponse();
    message.leafs =
      ((_a = object.leafs) === null || _a === void 0
        ? void 0
        : _a.map((e) => e)) || [];
    message.count = (_b = object.count) !== null && _b !== void 0 ? _b : 0;
    message.root =
      (_c = object.root) !== null && _c !== void 0 ? _c : new Uint8Array(0);
    return message;
  },
};
function createBaseQueryNoopHookRequest() {
  return { id: '' };
}
exports.QueryNoopHookRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return exports.QueryNoopHookRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryNoopHookRequest();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    return message;
  },
};
function createBaseQueryNoopHookResponse() {
  return { noop_hook: undefined };
}
exports.QueryNoopHookResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.noop_hook !== undefined) {
      types_1.NoopHook.encode(
        message.noop_hook,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.noop_hook = types_1.NoopHook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      noop_hook: isSet(object.noop_hook)
        ? types_1.NoopHook.fromJSON(object.noop_hook)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.noop_hook !== undefined) {
      obj.noop_hook = types_1.NoopHook.toJSON(message.noop_hook);
    }
    return obj;
  },
  create(base) {
    return exports.QueryNoopHookResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHookResponse();
    message.noop_hook =
      object.noop_hook !== undefined && object.noop_hook !== null
        ? types_1.NoopHook.fromPartial(object.noop_hook)
        : undefined;
    return message;
  },
};
function createBaseQueryNoopHooksRequest() {
  return { pagination: undefined };
}
exports.QueryNoopHooksRequest = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.pagination !== undefined) {
      pagination_1.PageRequest.encode(
        message.pagination,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = pagination_1.PageRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? pagination_1.PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryNoopHooksRequest.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHooksRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryNoopHooksResponse() {
  return { noop_hooks: [], pagination: undefined };
}
exports.QueryNoopHooksResponse = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.noop_hooks) {
      types_1.NoopHook.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      pagination_1.PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.noop_hooks.push(
            types_1.NoopHook.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = pagination_1.PageResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      noop_hooks: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.noop_hooks,
      )
        ? object.noop_hooks.map((e) => types_1.NoopHook.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? pagination_1.PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (
      (_a = message.noop_hooks) === null || _a === void 0 ? void 0 : _a.length
    ) {
      obj.noop_hooks = message.noop_hooks.map((e) =>
        types_1.NoopHook.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return exports.QueryNoopHooksResponse.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryNoopHooksResponse();
    message.noop_hooks =
      ((_a = object.noop_hooks) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.NoopHook.fromPartial(e))) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? pagination_1.PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
exports.QueryServiceName = 'hyperlane.core.post_dispatch.v1.Query';
class QueryClientImpl {
  constructor(rpc, opts) {
    this.service =
      (opts === null || opts === void 0 ? void 0 : opts.service) ||
      exports.QueryServiceName;
    this.rpc = rpc;
    this.Igps = this.Igps.bind(this);
    this.Igp = this.Igp.bind(this);
    this.DestinationGasConfigs = this.DestinationGasConfigs.bind(this);
    this.QuoteGasPayment = this.QuoteGasPayment.bind(this);
    this.MerkleTreeHooks = this.MerkleTreeHooks.bind(this);
    this.MerkleTreeHook = this.MerkleTreeHook.bind(this);
    this.NoopHooks = this.NoopHooks.bind(this);
    this.NoopHook = this.NoopHook.bind(this);
  }
  Igps(request) {
    const data = exports.QueryIgpsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igps', data);
    return promise.then((data) =>
      exports.QueryIgpsResponse.decode(minimal_1.default.Reader.create(data)),
    );
  }
  Igp(request) {
    const data = exports.QueryIgpRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igp', data);
    return promise.then((data) =>
      exports.QueryIgpResponse.decode(minimal_1.default.Reader.create(data)),
    );
  }
  DestinationGasConfigs(request) {
    const data =
      exports.QueryDestinationGasConfigsRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'DestinationGasConfigs',
      data,
    );
    return promise.then((data) =>
      exports.QueryDestinationGasConfigsResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  QuoteGasPayment(request) {
    const data = exports.QueryQuoteGasPaymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'QuoteGasPayment', data);
    return promise.then((data) =>
      exports.QueryQuoteGasPaymentResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  MerkleTreeHooks(request) {
    const data = exports.QueryMerkleTreeHooks.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHooks', data);
    return promise.then((data) =>
      exports.QueryMerkleTreeHooksResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  MerkleTreeHook(request) {
    const data = exports.QueryMerkleTreeHook.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHook', data);
    return promise.then((data) =>
      exports.QueryMerkleTreeHookResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  NoopHooks(request) {
    const data = exports.QueryNoopHooksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHooks', data);
    return promise.then((data) =>
      exports.QueryNoopHooksResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
  NoopHook(request) {
    const data = exports.QueryNoopHookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHook', data);
    return promise.then((data) =>
      exports.QueryNoopHookResponse.decode(
        minimal_1.default.Reader.create(data),
      ),
    );
  }
}
exports.QueryClientImpl = QueryClientImpl;
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map
