'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/genesis.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.DestinationGasConfigGenesisWrapper =
  exports.GenesisState =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const long_1 = __importDefault(require('long'));
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const types_1 = require('./types');
exports.protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseGenesisState() {
  return {
    igps: [],
    igp_gas_configs: [],
    merkle_tree_hooks: [],
    noop_hooks: [],
  };
}
exports.GenesisState = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.igps) {
      types_1.InterchainGasPaymaster.encode(
        v,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    for (const v of message.igp_gas_configs) {
      exports.DestinationGasConfigGenesisWrapper.encode(
        v,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    for (const v of message.merkle_tree_hooks) {
      types_1.MerkleTreeHook.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.noop_hooks) {
      types_1.NoopHook.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igps.push(
            types_1.InterchainGasPaymaster.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.igp_gas_configs.push(
            exports.DestinationGasConfigGenesisWrapper.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.merkle_tree_hooks.push(
            types_1.MerkleTreeHook.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.noop_hooks.push(
            types_1.NoopHook.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igps: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.igps,
      )
        ? object.igps.map((e) => types_1.InterchainGasPaymaster.fromJSON(e))
        : [],
      igp_gas_configs: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.igp_gas_configs,
      )
        ? object.igp_gas_configs.map((e) =>
            exports.DestinationGasConfigGenesisWrapper.fromJSON(e),
          )
        : [],
      merkle_tree_hooks: globalThis.Array.isArray(
        object === null || object === void 0
          ? void 0
          : object.merkle_tree_hooks,
      )
        ? object.merkle_tree_hooks.map((e) =>
            types_1.MerkleTreeHook.fromJSON(e),
          )
        : [],
      noop_hooks: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.noop_hooks,
      )
        ? object.noop_hooks.map((e) => types_1.NoopHook.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d;
    const obj = {};
    if ((_a = message.igps) === null || _a === void 0 ? void 0 : _a.length) {
      obj.igps = message.igps.map((e) =>
        types_1.InterchainGasPaymaster.toJSON(e),
      );
    }
    if (
      (_b = message.igp_gas_configs) === null || _b === void 0
        ? void 0
        : _b.length
    ) {
      obj.igp_gas_configs = message.igp_gas_configs.map((e) =>
        exports.DestinationGasConfigGenesisWrapper.toJSON(e),
      );
    }
    if (
      (_c = message.merkle_tree_hooks) === null || _c === void 0
        ? void 0
        : _c.length
    ) {
      obj.merkle_tree_hooks = message.merkle_tree_hooks.map((e) =>
        types_1.MerkleTreeHook.toJSON(e),
      );
    }
    if (
      (_d = message.noop_hooks) === null || _d === void 0 ? void 0 : _d.length
    ) {
      obj.noop_hooks = message.noop_hooks.map((e) =>
        types_1.NoopHook.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return exports.GenesisState.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d;
    const message = createBaseGenesisState();
    message.igps =
      ((_a = object.igps) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.InterchainGasPaymaster.fromPartial(e))) || [];
    message.igp_gas_configs =
      ((_b = object.igp_gas_configs) === null || _b === void 0
        ? void 0
        : _b.map((e) =>
            exports.DestinationGasConfigGenesisWrapper.fromPartial(e),
          )) || [];
    message.merkle_tree_hooks =
      ((_c = object.merkle_tree_hooks) === null || _c === void 0
        ? void 0
        : _c.map((e) => types_1.MerkleTreeHook.fromPartial(e))) || [];
    message.noop_hooks =
      ((_d = object.noop_hooks) === null || _d === void 0
        ? void 0
        : _d.map((e) => types_1.NoopHook.fromPartial(e))) || [];
    return message;
  },
};
function createBaseDestinationGasConfigGenesisWrapper() {
  return {
    remote_domain: 0,
    gas_oracle: undefined,
    gas_overhead: '',
    igp_id: '0',
  };
}
exports.DestinationGasConfigGenesisWrapper = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.remote_domain !== 0) {
      writer.uint32(8).uint32(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      types_1.GasOracle.encode(
        message.gas_oracle,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    if (message.gas_overhead !== '') {
      writer.uint32(26).string(message.gas_overhead);
    }
    if (message.igp_id !== '0') {
      writer.uint32(32).uint64(message.igp_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationGasConfigGenesisWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.remote_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.gas_oracle = types_1.GasOracle.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_overhead = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.igp_id = longToString(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      remote_domain: isSet(object.remote_domain)
        ? globalThis.Number(object.remote_domain)
        : 0,
      gas_oracle: isSet(object.gas_oracle)
        ? types_1.GasOracle.fromJSON(object.gas_oracle)
        : undefined,
      gas_overhead: isSet(object.gas_overhead)
        ? globalThis.String(object.gas_overhead)
        : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '0',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.remote_domain !== 0) {
      obj.remote_domain = Math.round(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      obj.gas_oracle = types_1.GasOracle.toJSON(message.gas_oracle);
    }
    if (message.gas_overhead !== '') {
      obj.gas_overhead = message.gas_overhead;
    }
    if (message.igp_id !== '0') {
      obj.igp_id = message.igp_id;
    }
    return obj;
  },
  create(base) {
    return exports.DestinationGasConfigGenesisWrapper.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseDestinationGasConfigGenesisWrapper();
    message.remote_domain =
      (_a = object.remote_domain) !== null && _a !== void 0 ? _a : 0;
    message.gas_oracle =
      object.gas_oracle !== undefined && object.gas_oracle !== null
        ? types_1.GasOracle.fromPartial(object.gas_oracle)
        : undefined;
    message.gas_overhead =
      (_b = object.gas_overhead) !== null && _b !== void 0 ? _b : '';
    message.igp_id = (_c = object.igp_id) !== null && _c !== void 0 ? _c : '0';
    return message;
  },
};
function longToString(long) {
  return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
  minimal_1.default.util.Long = long_1.default;
  minimal_1.default.configure();
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map
