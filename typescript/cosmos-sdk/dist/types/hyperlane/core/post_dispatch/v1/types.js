'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/types.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.NoopHook =
  exports.Tree =
  exports.MerkleTreeHook =
  exports.GasOracle =
  exports.DestinationGasConfig =
  exports.InterchainGasPaymaster =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const coin_1 = require('../../../../cosmos/base/v1beta1/coin');
exports.protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseInterchainGasPaymaster() {
  return { id: '', owner: '', denom: '', claimable_fees: [] };
}
exports.InterchainGasPaymaster = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.denom !== '') {
      writer.uint32(26).string(message.denom);
    }
    for (const v of message.claimable_fees) {
      coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterchainGasPaymaster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.claimable_fees.push(
            coin_1.Coin.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      denom: isSet(object.denom) ? globalThis.String(object.denom) : '',
      claimable_fees: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.claimable_fees,
      )
        ? object.claimable_fees.map((e) => coin_1.Coin.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.denom !== '') {
      obj.denom = message.denom;
    }
    if (
      (_a = message.claimable_fees) === null || _a === void 0
        ? void 0
        : _a.length
    ) {
      obj.claimable_fees = message.claimable_fees.map((e) =>
        coin_1.Coin.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return exports.InterchainGasPaymaster.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d;
    const message = createBaseInterchainGasPaymaster();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
    message.denom = (_c = object.denom) !== null && _c !== void 0 ? _c : '';
    message.claimable_fees =
      ((_d = object.claimable_fees) === null || _d === void 0
        ? void 0
        : _d.map((e) => coin_1.Coin.fromPartial(e))) || [];
    return message;
  },
};
function createBaseDestinationGasConfig() {
  return { remote_domain: 0, gas_oracle: undefined, gas_overhead: '' };
}
exports.DestinationGasConfig = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.remote_domain !== 0) {
      writer.uint32(8).uint32(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      exports.GasOracle.encode(
        message.gas_oracle,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    if (message.gas_overhead !== '') {
      writer.uint32(26).string(message.gas_overhead);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationGasConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.remote_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.gas_oracle = exports.GasOracle.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_overhead = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      remote_domain: isSet(object.remote_domain)
        ? globalThis.Number(object.remote_domain)
        : 0,
      gas_oracle: isSet(object.gas_oracle)
        ? exports.GasOracle.fromJSON(object.gas_oracle)
        : undefined,
      gas_overhead: isSet(object.gas_overhead)
        ? globalThis.String(object.gas_overhead)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.remote_domain !== 0) {
      obj.remote_domain = Math.round(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      obj.gas_oracle = exports.GasOracle.toJSON(message.gas_oracle);
    }
    if (message.gas_overhead !== '') {
      obj.gas_overhead = message.gas_overhead;
    }
    return obj;
  },
  create(base) {
    return exports.DestinationGasConfig.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseDestinationGasConfig();
    message.remote_domain =
      (_a = object.remote_domain) !== null && _a !== void 0 ? _a : 0;
    message.gas_oracle =
      object.gas_oracle !== undefined && object.gas_oracle !== null
        ? exports.GasOracle.fromPartial(object.gas_oracle)
        : undefined;
    message.gas_overhead =
      (_b = object.gas_overhead) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function createBaseGasOracle() {
  return { token_exchange_rate: '', gas_price: '' };
}
exports.GasOracle = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.token_exchange_rate !== '') {
      writer.uint32(10).string(message.token_exchange_rate);
    }
    if (message.gas_price !== '') {
      writer.uint32(18).string(message.gas_price);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGasOracle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.token_exchange_rate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.gas_price = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      token_exchange_rate: isSet(object.token_exchange_rate)
        ? globalThis.String(object.token_exchange_rate)
        : '',
      gas_price: isSet(object.gas_price)
        ? globalThis.String(object.gas_price)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.token_exchange_rate !== '') {
      obj.token_exchange_rate = message.token_exchange_rate;
    }
    if (message.gas_price !== '') {
      obj.gas_price = message.gas_price;
    }
    return obj;
  },
  create(base) {
    return exports.GasOracle.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGasOracle();
    message.token_exchange_rate =
      (_a = object.token_exchange_rate) !== null && _a !== void 0 ? _a : '';
    message.gas_price =
      (_b = object.gas_price) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function createBaseMerkleTreeHook() {
  return { id: '', mailbox_id: '', owner: '', tree: undefined };
}
exports.MerkleTreeHook = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    if (message.owner !== '') {
      writer.uint32(26).string(message.owner);
    }
    if (message.tree !== undefined) {
      exports.Tree.encode(message.tree, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.tree = exports.Tree.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      tree: isSet(object.tree) ? exports.Tree.fromJSON(object.tree) : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.tree !== undefined) {
      obj.tree = exports.Tree.toJSON(message.tree);
    }
    return obj;
  },
  create(base) {
    return exports.MerkleTreeHook.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseMerkleTreeHook();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.mailbox_id =
      (_b = object.mailbox_id) !== null && _b !== void 0 ? _b : '';
    message.owner = (_c = object.owner) !== null && _c !== void 0 ? _c : '';
    message.tree =
      object.tree !== undefined && object.tree !== null
        ? exports.Tree.fromPartial(object.tree)
        : undefined;
    return message;
  },
};
function createBaseTree() {
  return { branch: [], count: 0 };
}
exports.Tree = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    for (const v of message.branch) {
      writer.uint32(10).bytes(v);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.branch.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.count = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      branch: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.branch,
      )
        ? object.branch.map((e) => bytesFromBase64(e))
        : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.branch) === null || _a === void 0 ? void 0 : _a.length) {
      obj.branch = message.branch.map((e) => base64FromBytes(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },
  create(base) {
    return exports.Tree.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseTree();
    message.branch =
      ((_a = object.branch) === null || _a === void 0
        ? void 0
        : _a.map((e) => e)) || [];
    message.count = (_b = object.count) !== null && _b !== void 0 ? _b : 0;
    return message;
  },
};
function createBaseNoopHook() {
  return { id: '', owner: '' };
}
exports.NoopHook = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoopHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },
  create(base) {
    return exports.NoopHook.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseNoopHook();
    message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
    message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
    return message;
  },
};
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map
