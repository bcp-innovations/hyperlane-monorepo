'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/events.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.Process = exports.Dispatch = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require('protobufjs/minimal'));
exports.protobufPackage = 'hyperlane.core.v1';
function createBaseDispatch() {
  return {
    origin_mailbox_id: '',
    sender: '',
    destination: 0,
    recipient: '',
    message: '',
  };
}
exports.Dispatch = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.origin_mailbox_id !== '') {
      writer.uint32(10).string(message.origin_mailbox_id);
    }
    if (message.sender !== '') {
      writer.uint32(18).string(message.sender);
    }
    if (message.destination !== 0) {
      writer.uint32(24).uint32(message.destination);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.message !== '') {
      writer.uint32(42).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDispatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.origin_mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.destination = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      origin_mailbox_id: isSet(object.origin_mailbox_id)
        ? globalThis.String(object.origin_mailbox_id)
        : '',
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      destination: isSet(object.destination)
        ? globalThis.Number(object.destination)
        : 0,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.origin_mailbox_id !== '') {
      obj.origin_mailbox_id = message.origin_mailbox_id;
    }
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.destination !== 0) {
      obj.destination = Math.round(message.destination);
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },
  create(base) {
    return exports.Dispatch.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e;
    const message = createBaseDispatch();
    message.origin_mailbox_id =
      (_a = object.origin_mailbox_id) !== null && _a !== void 0 ? _a : '';
    message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : '';
    message.destination =
      (_c = object.destination) !== null && _c !== void 0 ? _c : 0;
    message.recipient =
      (_d = object.recipient) !== null && _d !== void 0 ? _d : '';
    message.message = (_e = object.message) !== null && _e !== void 0 ? _e : '';
    return message;
  },
};
function createBaseProcess() {
  return {
    origin_mailbox_id: '',
    origin: 0,
    sender: '',
    recipient: '',
    message_id: '',
    message: '',
  };
}
exports.Process = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.origin_mailbox_id !== '') {
      writer.uint32(10).string(message.origin_mailbox_id);
    }
    if (message.origin !== 0) {
      writer.uint32(16).uint32(message.origin);
    }
    if (message.sender !== '') {
      writer.uint32(26).string(message.sender);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.message_id !== '') {
      writer.uint32(42).string(message.message_id);
    }
    if (message.message !== '') {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.origin_mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.origin = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.message_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      origin_mailbox_id: isSet(object.origin_mailbox_id)
        ? globalThis.String(object.origin_mailbox_id)
        : '',
      origin: isSet(object.origin) ? globalThis.Number(object.origin) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.origin_mailbox_id !== '') {
      obj.origin_mailbox_id = message.origin_mailbox_id;
    }
    if (message.origin !== 0) {
      obj.origin = Math.round(message.origin);
    }
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },
  create(base) {
    return exports.Process.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f;
    const message = createBaseProcess();
    message.origin_mailbox_id =
      (_a = object.origin_mailbox_id) !== null && _a !== void 0 ? _a : '';
    message.origin = (_b = object.origin) !== null && _b !== void 0 ? _b : 0;
    message.sender = (_c = object.sender) !== null && _c !== void 0 ? _c : '';
    message.recipient =
      (_d = object.recipient) !== null && _d !== void 0 ? _d : '';
    message.message_id =
      (_e = object.message_id) !== null && _e !== void 0 ? _e : '';
    message.message = (_f = object.message) !== null && _f !== void 0 ? _f : '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map
