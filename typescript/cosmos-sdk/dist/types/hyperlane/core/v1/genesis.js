'use strict';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/genesis.proto
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.MailboxMessage =
  exports.GenesisState =
  exports.protobufPackage =
    void 0;
/* eslint-disable */
const long_1 = __importDefault(require('long'));
const minimal_1 = __importDefault(require('protobufjs/minimal'));
const genesis_1 = require('../interchain_security/v1/genesis');
const genesis_2 = require('../post_dispatch/v1/genesis');
const types_1 = require('./types');
exports.protobufPackage = 'hyperlane.core.v1';
function createBaseGenesisState() {
  return {
    ism_genesis: undefined,
    post_dispatch_genesis: undefined,
    mailboxes: [],
    messages: [],
    ism_sequence: '0',
    post_dispatch_sequence: '0',
    app_sequence: '0',
  };
}
exports.GenesisState = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.ism_genesis !== undefined) {
      genesis_1.GenesisState.encode(
        message.ism_genesis,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.post_dispatch_genesis !== undefined) {
      genesis_2.GenesisState.encode(
        message.post_dispatch_genesis,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    for (const v of message.mailboxes) {
      types_1.Mailbox.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.messages) {
      exports.MailboxMessage.encode(v, writer.uint32(34).fork()).ldelim();
    }
    if (message.ism_sequence !== '0') {
      writer.uint32(40).uint64(message.ism_sequence);
    }
    if (message.post_dispatch_sequence !== '0') {
      writer.uint32(48).uint64(message.post_dispatch_sequence);
    }
    if (message.app_sequence !== '0') {
      writer.uint32(56).uint64(message.app_sequence);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ism_genesis = genesis_1.GenesisState.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.post_dispatch_genesis = genesis_2.GenesisState.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mailboxes.push(
            types_1.Mailbox.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.messages.push(
            exports.MailboxMessage.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.ism_sequence = longToString(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.post_dispatch_sequence = longToString(reader.uint64());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.app_sequence = longToString(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ism_genesis: isSet(object.ism_genesis)
        ? genesis_1.GenesisState.fromJSON(object.ism_genesis)
        : undefined,
      post_dispatch_genesis: isSet(object.post_dispatch_genesis)
        ? genesis_2.GenesisState.fromJSON(object.post_dispatch_genesis)
        : undefined,
      mailboxes: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.mailboxes,
      )
        ? object.mailboxes.map((e) => types_1.Mailbox.fromJSON(e))
        : [],
      messages: globalThis.Array.isArray(
        object === null || object === void 0 ? void 0 : object.messages,
      )
        ? object.messages.map((e) => exports.MailboxMessage.fromJSON(e))
        : [],
      ism_sequence: isSet(object.ism_sequence)
        ? globalThis.String(object.ism_sequence)
        : '0',
      post_dispatch_sequence: isSet(object.post_dispatch_sequence)
        ? globalThis.String(object.post_dispatch_sequence)
        : '0',
      app_sequence: isSet(object.app_sequence)
        ? globalThis.String(object.app_sequence)
        : '0',
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.ism_genesis !== undefined) {
      obj.ism_genesis = genesis_1.GenesisState.toJSON(message.ism_genesis);
    }
    if (message.post_dispatch_genesis !== undefined) {
      obj.post_dispatch_genesis = genesis_2.GenesisState.toJSON(
        message.post_dispatch_genesis,
      );
    }
    if (
      (_a = message.mailboxes) === null || _a === void 0 ? void 0 : _a.length
    ) {
      obj.mailboxes = message.mailboxes.map((e) => types_1.Mailbox.toJSON(e));
    }
    if (
      (_b = message.messages) === null || _b === void 0 ? void 0 : _b.length
    ) {
      obj.messages = message.messages.map((e) =>
        exports.MailboxMessage.toJSON(e),
      );
    }
    if (message.ism_sequence !== '0') {
      obj.ism_sequence = message.ism_sequence;
    }
    if (message.post_dispatch_sequence !== '0') {
      obj.post_dispatch_sequence = message.post_dispatch_sequence;
    }
    if (message.app_sequence !== '0') {
      obj.app_sequence = message.app_sequence;
    }
    return obj;
  },
  create(base) {
    return exports.GenesisState.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e;
    const message = createBaseGenesisState();
    message.ism_genesis =
      object.ism_genesis !== undefined && object.ism_genesis !== null
        ? genesis_1.GenesisState.fromPartial(object.ism_genesis)
        : undefined;
    message.post_dispatch_genesis =
      object.post_dispatch_genesis !== undefined &&
      object.post_dispatch_genesis !== null
        ? genesis_2.GenesisState.fromPartial(object.post_dispatch_genesis)
        : undefined;
    message.mailboxes =
      ((_a = object.mailboxes) === null || _a === void 0
        ? void 0
        : _a.map((e) => types_1.Mailbox.fromPartial(e))) || [];
    message.messages =
      ((_b = object.messages) === null || _b === void 0
        ? void 0
        : _b.map((e) => exports.MailboxMessage.fromPartial(e))) || [];
    message.ism_sequence =
      (_c = object.ism_sequence) !== null && _c !== void 0 ? _c : '0';
    message.post_dispatch_sequence =
      (_d = object.post_dispatch_sequence) !== null && _d !== void 0 ? _d : '0';
    message.app_sequence =
      (_e = object.app_sequence) !== null && _e !== void 0 ? _e : '0';
    return message;
  },
};
function createBaseMailboxMessage() {
  return { mailbox_id: '0', message_id: new Uint8Array(0) };
}
exports.MailboxMessage = {
  encode(message, writer = minimal_1.default.Writer.create()) {
    if (message.mailbox_id !== '0') {
      writer.uint32(8).uint64(message.mailbox_id);
    }
    if (message.message_id.length !== 0) {
      writer.uint32(18).bytes(message.message_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof minimal_1.default.Reader
        ? input
        : minimal_1.default.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMailboxMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.mailbox_id = longToString(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message_id = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '0',
      message_id: isSet(object.message_id)
        ? bytesFromBase64(object.message_id)
        : new Uint8Array(0),
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mailbox_id !== '0') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.message_id.length !== 0) {
      obj.message_id = base64FromBytes(message.message_id);
    }
    return obj;
  },
  create(base) {
    return exports.MailboxMessage.fromPartial(
      base !== null && base !== void 0 ? base : {},
    );
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseMailboxMessage();
    message.mailbox_id =
      (_a = object.mailbox_id) !== null && _a !== void 0 ? _a : '0';
    message.message_id =
      (_b = object.message_id) !== null && _b !== void 0
        ? _b
        : new Uint8Array(0);
    return message;
  },
};
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}
function longToString(long) {
  return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
  minimal_1.default.util.Long = long_1.default;
  minimal_1.default.configure();
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map
